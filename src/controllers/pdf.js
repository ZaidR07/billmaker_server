import puppeteer from "puppeteer";
import fs from "fs";
import path from "path";

export const createpdf = async (req, res) => {
  const itemdata = req.body.payload;
  const currentdate = Date.now().toString();
  const invoiceno = currentdate.slice(7, 13);

  const htmltable = `
  ${itemdata
    .map(
      (item) => `
    <tr>
      <td>${item.description}</td>
      <td>${item.qty}</td>
      <td>${item.amount}</td>
    </tr>
  `
    )
    .join("")}
`;

  // HTML Template for Invoice
  const htmlContent = `
    <html>
  <head>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: Arial, sans-serif;
        padding: 2vh 0vw 2vh 5vw;
        display: flex;
      }
      .invoice-box {
        min-width: 95%;
        border: 1px solid #b5b4b4;
        padding: 20px;
      }
      h2 {
        text-align: right;
        color: #777;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      td,
      th {
        border: 1px solid #b5b4b4;
        padding: 10px;
        text-align: left;
      }
      .total {
        text-align: right;
        font-weight: bold;
      }
      .amount {
        text-align: right;
      }
      .footer {
        margin-top: 20px;
        font-size: 12px;
        text-align: center;
        color: hsl(0, 0%, 33%);
      }
    </style>
  </head>
  <body>
    <div class="invoice-box">
      <div style="display: flex; justify-content: space-between">
        <div>
          <p>
            <strong>${itemdata[0].fromcompanyname}</strong><br />${
    itemdata[0].fromaddress ? itemdata[0].fromaddress : ""
  }<br />${itemdata[0].fromcontact1} ${
    itemdata[0].fromcontact2 ? `,${itemdata[0].fromcontact2}` : ""
  }
          </p>
        </div>
        <div>
          <h2>INVOICE</h2>

          <table>
            <tr>
              <th
                style="padding: 1vh 2.5vw 1vh 2.5vw; background-color: #d5d2d2"
              >
                Invoice No.
              </th>
              <th
                style="padding: 1vh 2.5vw 1vh 2.5vw; background-color: #d5d2d2"
              >
                Date
              </th>
            </tr>
            <tr>
              <td style="padding: 1vh 2.5vw 1vh 2.5vw">${invoiceno}</td>

              <td style="padding: 1vh 2.5vw 1vh 2.5vw">${itemdata[0].date}</td>
            </tr>
          </table>
        </div>
      </div>

      <h3>BILL TO</h3>
      <p>
        ${itemdata[0].receivingperson}
      </p>
      <br />
      ${itemdata[0].tocompanyname ? `<p>${itemdata[0].tocompanyname}</p>` : ""}
      <p>
        ${itemdata[0].tocontact}
      </p>

        
      

      <table>
        <tr>
          <th>Description</th>
          <th>Quantity</th>
          <th class="amount">Amount</th>
        </tr>
        ${htmltable}

       
      </table>

      <p class="footer">
        Thank you for your business!<br />If you have any questions, contact
        [Name, Phone, Email]
      </p>
    </div>
    <div
      style="
        
        height: 25vh;
        max-width: 3vw;
        display: grid;
        place-items: center;
        margin-left: 1vw;
        margin-top: 5vh;
        border: 1px solid #b5b4b4;
      "
    >
      <p
        style="
          transform: rotate(-90deg);
          text-wrap-mode: nowrap;
          margin-left: -98px;
          
        "
      >
        Generated by Zaid Soft@Ware
      </p>
    </div>
  </body>
</html>

  `;

  try {
    // Launch Puppeteer to generate the PDF
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    await page.setContent(htmlContent);
    const pdfBuffer = await page.pdf({ format: "A4", printBackground: true }); // Enable background rendering

    // Define the path to save the PDF on the server
    const pdfPath = path.join("pdfs", `invoice-${Date.now()}.pdf`);

    // Ensure the directory exists, create if it doesn't
    const dirPath = path.dirname(pdfPath);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }

    // Save the PDF buffer to the file system
    fs.writeFileSync(pdfPath, pdfBuffer);

    await browser.close();

    // Log the saved file path for debugging purposes
    console.log(`PDF saved at ${pdfPath}`);

    // Optionally send success response
    res.status(200).json({
      path: pdfPath,
    });
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).send("Error generating PDF");
  }
};

export const downloadPDF = async (req, res) => {
  try {
    const { path: filePath } = req.body; // Rename the destructured variable to avoid conflict

    if (!filePath || typeof filePath !== "string") {
      res.status(400).send("Invalid file name");
      return;
    }

    if (!fs.existsSync(filePath)) {
      res.status(404).send("File not found");
      return;
    }

    // Stream the file to the client
    res.setHeader("Content-Disposition", `attachment; filename=${filePath}`);
    res.setHeader("Content-Type", "application/pdf");
    const fileStream = fs.createReadStream(filePath);
    fileStream.pipe(res);
  } catch (error) {
    console.error("Error handling PDF download:", error);
    res.status(500).send("Internal server error");
  }
};
