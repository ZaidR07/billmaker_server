import { jsPDF } from "jspdf";
import fs from "fs";
import path from "path";
import "jspdf-autotable";

export const createpdf = async (req, res) => {
  try {
    // Validate incoming data
    if (
      !req.body ||
      !req.body.payload ||
      !Array.isArray(req.body.payload) ||
      req.body.payload.length === 0
    ) {
      return res
        .status(400)
        .json({ error: "Invalid or missing data in request." });
    }

    const itemdata = req.body.payload;

   

    const currentdate = Date.now().toString();
    const invoiceno = currentdate.slice(7, 13);

    const datecolumns = ["Invoice No.", "Date"];
    const daterows = [[invoiceno, itemdata[0].date]];

    const productcolumns = ["Name", "Qty","Rate", "Amount"];
    const productrows = itemdata.map((item) => [
      item.description,
      item.qty,
      item.amount,
      item.amount * item.qty,

    ]);

    const totalamnt = itemdata.reduce((sum, item) => {
      const amount = parseInt(item.amount * item.qty);
      return !isNaN(amount) ? sum + amount : sum; // Skip invalid amounts
    }, 0);

    const doc = new jsPDF();

    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;

    let yoftotal = 10 * itemdata.length + 11;

    // Set border properties (X, Y, Width, Height)
    const margin = 12; // Adjust margin as needed
    doc.setLineWidth(0.5); // Set border thickness
    doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);
    let yPosition = margin + 10;
    let xPosition = margin + 5;

    // Add company and contact details (check if data exists before adding)
    doc.setFont("Arial", "normal");
    doc.setFontSize(12);

    doc.setFontSize(20);
    doc.text("INVOICE", pageWidth - 45, yPosition);

    doc.setFontSize(14);

    if (itemdata[0].fromcompanyname)
      doc.text(itemdata[0].fromcompanyname, xPosition, yPosition);
    yPosition += 8;
    if (itemdata[0].fromaddress)
      doc.text(itemdata[0].fromaddress, xPosition, yPosition);
    yPosition += 8;
    if (itemdata[0].fromcontact1)
      doc.text(`${itemdata[0].fromcontact1} `, xPosition, yPosition);
    if (itemdata[0].fromcontact2) {
      doc.text(`,${itemdata[0].fromcontact1}`, 48, yPosition);
    }

    yPosition += 10;
    doc.autoTable({
      head: [datecolumns], // Table headers
      body: daterows, // Table data
      startY: yPosition,
      margin: { left: pageWidth - 80 }, // Position of the table
      theme: "grid",

      columnStyles: {
        0: { cellWidth: 30 },
        1: { cellWidth: 30 },
      },
      headStyles: {
        fillColor: [211, 211, 211], // Light Gray (RGB: 211, 211, 211)
        textColor: [0, 0, 0],
        halign: "center",
        // fontStyle: "bold"
      },
      columnStyles: {
        0: { halign: "center" }, // Center Quantity
        1: { halign: "center" }, // Center Amount
      },
    });

    // Add "Bill To" Information
    yPosition += 15;
    doc.setFontSize(14);
    doc.text("BILL TO", xPosition, yPosition);
    yPosition += 8;
    doc.setFontSize(12);
    if (itemdata[0].receivingperson)
      doc.text(itemdata[0].receivingperson, xPosition, yPosition);
    yPosition += 8;
    if (itemdata[0].tocompanyname)
      doc.text(itemdata[0].tocompanyname, xPosition, yPosition);
    yPosition += 8;
    if (itemdata[0].tocontact)
      doc.text(itemdata[0].tocontact, xPosition, yPosition);

    // Add table header
    yPosition += 20;

    doc.autoTable({
      head: [productcolumns], // Table headers
      body: productrows, // Table data
      startY: yPosition,
      tableWidth: pageWidth - 35, // Adjusted table width
      margin: { left: xPosition },
      theme: "grid",

      // Center the text of the entire header and each column
      headStyles: {
        fillColor: [211, 211, 211], // Light Gray (RGB: 211, 211, 211)
        textColor: [0, 0, 0],
        halign: "center",
      },

      columnStyles: {
        0: { halign: "left" }, // Align Description to left
        1: { halign: "center" }, // Center Quantity
        2: { halign: "center" }, // Center Amount
        3: { halign: "right" }, // Center Amount

      },
    });

    yPosition += yoftotal;
    doc.text("Total", xPosition + 5, yPosition);
    doc.text(totalamnt.toString(), pageWidth - 40, yPosition);

    doc.setTextColor(0, 0, 255);
    doc.text(
      "Generated by @Trex Software Solutions",
      pageWidth / 2 - 32,
      pageHeight - 5
    );

    // // Define PDF save path
    // const pdfDir = path.join("pdfs");
    // const pdfPath = path.join(pdfDir, `invoice-${Date.now()}.pdf`);

    const pdfDir = "/tmp"; // Use /tmp instead of "pdfs"
    const pdfPath = path.join(pdfDir, `invoice-${Date.now()}.pdf`);

    // Ensure the directory exists
    if (!fs.existsSync(pdfDir)) {
      fs.mkdirSync(pdfDir, { recursive: true });
    }

    // Save the PDF file
    doc.save(pdfPath);

    // Send success response
    res.status(200).json({
      message: "PDF generated successfully.",
      path: pdfPath,
    });
  } catch (error) {
    console.error("Error generating PDF:", error);
    console.log(error);

    res
      .status(500)
      .json({ error: "Internal server error while generating PDF." });
  }
};

export const downloadPDF = async (req, res) => {
  try {
    const { path: filePath } = req.body; // Rename the destructured variable to avoid conflict

    if (!filePath || typeof filePath !== "string") {
      res.status(400).send("Invalid file name");
      return;
    }

    if (!fs.existsSync(filePath)) {
      res.status(404).send("File not found");
      return;
    }

    // Stream the file to the client
    res.setHeader("Content-Disposition", `attachment; filename=${filePath}`);
    res.setHeader("Content-Type", "application/pdf");
    const fileStream = fs.createReadStream(filePath);
    fileStream.pipe(res);
  } catch (error) {
    console.error("Error handling PDF download:", error);
    res.status(500).send("Internal server error");
  }
};
