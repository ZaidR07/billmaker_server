import { jsPDF } from "jspdf";
import fs from "fs";
import path from "path";

export const createpdf = async (req, res) => {
  const itemdata = req.body.payload;
  const currentdate = Date.now().toString();
  const invoiceno = currentdate.slice(7, 13);

  const doc = new jsPDF();
  
  // Define starting position
  let yPosition = 10;

  // Add company and contact details
  doc.setFont("Arial", "normal");
  doc.setFontSize(12);
  doc.text(`${itemdata[0].fromcompanyname}`, 10, yPosition);
  yPosition += 10;
  if (itemdata[0].fromaddress) doc.text(`${itemdata[0].fromaddress}`, 10, yPosition);
  yPosition += 10;
  doc.text(`${itemdata[0].fromcontact1}`, 10, yPosition);
  if (itemdata[0].fromcontact2) {
    yPosition += 10;
    doc.text(`${itemdata[0].fromcontact2}`, 10, yPosition);
  }

  // Add Invoice Header
  yPosition += 20;
  doc.setFontSize(16);
  doc.text("INVOICE", 150, yPosition);
  yPosition += 10;
  doc.setFontSize(12);
  doc.text(`Invoice No: ${invoiceno}`, 150, yPosition);
  yPosition += 10;
  doc.text(`Date: ${itemdata[0].date}`, 150, yPosition);
  
  // Add "Bill To" Information
  yPosition += 20;
  doc.setFontSize(14);
  doc.text("BILL TO", 10, yPosition);
  yPosition += 10;
  doc.setFontSize(12);
  doc.text(`${itemdata[0].receivingperson}`, 10, yPosition);
  yPosition += 10;
  if (itemdata[0].tocompanyname) doc.text(`${itemdata[0].tocompanyname}`, 10, yPosition);
  yPosition += 10;
  doc.text(`${itemdata[0].tocontact}`, 10, yPosition);

  // Add table header
  yPosition += 20;
  doc.setFontSize(12);
  doc.text("Description", 10, yPosition);
  doc.text("Quantity", 100, yPosition);
  doc.text("Amount", 170, yPosition);

  // Add table data
  yPosition += 10;
  itemdata.forEach(item => {
    doc.text(item.description, 10, yPosition);
    doc.text(item.qty.toString(), 100, yPosition);
    doc.text(item.amount.toString(), 170, yPosition);
    yPosition += 10;
  });

  // Add footer
  yPosition += 20;
  doc.setFontSize(10);
  doc.text("Thank you for your business! If you have any questions, contact [Name, Phone, Email]", 10, yPosition);

  // Add watermark
  doc.setFontSize(10);
  doc.text("Generated by Zaid Soft@Ware", 120, 270, null, null, 'center');

  // Save the PDF to a file
  const pdfPath = path.join("pdfs", `invoice-${Date.now()}.pdf`);
  try {
    // Ensure the directory exists
    const dirPath = path.dirname(pdfPath);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }

    // Save the PDF to the server
    doc.save(pdfPath);  // This will save the file

    // Optionally send success response
    res.status(200).json({
      path: pdfPath,
    });
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).send("Error generating PDF");
  }
};

export const downloadPDF = async (req, res) => {
  try {
    const { path: filePath } = req.body; // Rename the destructured variable to avoid conflict

    if (!filePath || typeof filePath !== "string") {
      res.status(400).send("Invalid file name");
      return;
    }

    if (!fs.existsSync(filePath)) {
      res.status(404).send("File not found");
      return;
    }

    // Stream the file to the client
    res.setHeader("Content-Disposition", `attachment; filename=${filePath}`);
    res.setHeader("Content-Type", "application/pdf");
    const fileStream = fs.createReadStream(filePath);
    fileStream.pipe(res);
  } catch (error) {
    console.error("Error handling PDF download:", error);
    res.status(500).send("Internal server error");
  }
};
